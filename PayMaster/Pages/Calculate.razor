@*Blazor page responsible for calculating employees' salary bi-weekly*@

@page "/Calculate"
@using PayMaster.Data

<div class="container-fluid">
  <div class="row my-2">
    <h2 class="text-center">Calculate Salary</h2>
  </div>
  <div class="row">
    <form class="d-flex flex-row my-1">
      <div class="col mx-1">
        <label for="code" class="form-label">First name:</label>
        <input type="text" id="code" class="form-control form-control-sm" @bind="firstName">
      </div>
      <div class="col mx-1">
        <label for="airline" class="form-label">Last name:</label>
        <input type="text" id="airline" class="form-control form-control-sm" @bind="lastName">
      </div>
      <div class="col align-self-end">
        <button type="button" class="btn btn-primary btn-sm w-100 btn-block" onclick="@SearchEmployee">
          Search employee
        </button>
      </div>
    </form>
  </div>
</div>

<!-- Display results -->
<div class="row my-y">
  <form class="d-flex flex-column my-1">
    <div>
      <div class="row my-2">
        <h2 class="text-center">Employees</h2>
      </div>
      <div class="col">
        <select class="form-select form-select-sm" @bind="matchingEmployeeId">
          <option readonly="default">Employees</option>
          @foreach (var e in matchingEmployees)
          {
            <option value="@e.Id">@e.FirstName @e.LastName</option>
          }
        </select>
      </div>
    </div>
  </form>
</div>

<div class="row m-1">
  <label for="firstname" class="input-group-text input-group-sm form-label">First Name:</label>
  <input type="text" value="@selectedEmployee?.FirstName" placeholder="First Name" class="form-control" id="firstname" readonly>
</div>
<div class="row m-1">
  <label for="lastname" class="input-group-text input-group-sm form-label">Last Name:</label>
  <input type="text" value="@selectedEmployee?.LastName.ToUpper()" placeholder="Last name" class="form-control" id="lastname" readonly>
</div>
<div class="row m-1">
  <label for="hourly_rate" class="input-group-text input-group-sm form-label">Hourly Rate:</label>
  @if (selectedEmployee != null)
  {
    <input type="number" id="hourly_rate_selected" name="hourly_rate" min="0.01" step="0.01" class="form-control" required value="@selectedEmployee.HourlyRate">
  }
  else
  {
    <input type="number" id="hourly_rate_placeholder" name="hourly_rate" min="0.01" step="0.01" class="form-control" placeholder="Hourly Rate">
  }
</div>
<div class="row m-1">
  <label for="hoursworked" class="input-group-text input-group-sm form-label">Hours Worked Bi-weekly:</label>
  <input type="number" @bind="hoursWorked" placeholder="Hours worked" class="form-control" id="hoursworked" min="1" step="1" required>
</div>
<div class="row m-1">
  <button class="btn btn-success btn-sm w-100 btn-block" type="button" onclick="@CalculateSalary">Calculate salary</button>
  
  @if (salary != 0)
  {
    <p class="row m-4 border border-success border-1 text-center">Bi-weekly salary: $@salary</p>
  }
</div>



@code {
  string firstName;
  string lastName;
  List<HourlyEmployee> listOfEmployees;
  List<HourlyEmployee> matchingEmployees = new();
  int matchingEmployeeId;
  HourlyEmployee selectedEmployee => SelectedEmployee();
  double hoursWorked;
  double salary;
  
  //Renders all the employees as soon as the page is open
  protected override void OnInitialized()
  {
    GetAllEmployees();
  }

  private async void GetAllEmployees()
  {
    listOfEmployees = await App.Repo.GetEmployees();
  }
  
  private void SearchEmployee()
  {
    matchingEmployees.Clear();
    //Add all employees in case the search fields are empty
    if (string.IsNullOrEmpty(firstName) && string.IsNullOrEmpty(lastName))
    {
      matchingEmployees.AddRange(listOfEmployees);
    }
    else
    {
      matchingEmployees.AddRange(listOfEmployees.Where
        (employee => (string.IsNullOrEmpty(firstName) || employee.FirstName == firstName.ToLower().Trim()) &&
                     (string.IsNullOrEmpty(lastName) || employee.LastName == lastName.ToLower().Trim())));
    }

    if (matchingEmployees.Count == 0) App.Current.MainPage.DisplayAlert("No results found", "No matching results", "Close");

    firstName = null;
    lastName = null;

  }
  
  private HourlyEmployee SelectedEmployee()
  {
    return listOfEmployees?.FirstOrDefault(employee => employee.Id == matchingEmployeeId);
  }

  private void CalculateSalary()
  {
    if (selectedEmployee == null)
    {
      App.Current.MainPage.DisplayAlert("No employee selected", "Please select a employee first.", "Close");
      return;
    }
    // Displays a message to the user that the employee is fired 
    if (selectedEmployee.IsActive == false)
    {
      App.Current.MainPage.DisplayAlert("Fired employee", "The selected employee is no longer working for you.", "Close");
      return;
    }
    salary = selectedEmployee.HourlyRate * hoursWorked;
  }
}