@page "/edit"
@using PayMaster.Data
@inject IJSRuntime JSRuntime

<!-- Employee search -->
<div class="container-fluid">
  <div class="row my-2">
    <h2 class="text-center">Edit Employee</h2>
  </div>
  <div class="row">
    <form class="d-flex flex-row my-1">
      <div class="col mx-1">
        <label for="code" class="form-label">First name:</label>
        <input type="text" id="code" class="form-control form-control-sm" @bind="firstName">
      </div>
      <div class="col mx-1">
        <label for="airline" class="form-label">Last name:</label>
        <input type="text" id="airline" class="form-control form-control-sm" @bind="lastName">
      </div>
      <div class="col align-self-end">
        <button type="button" class="btn btn-primary btn-sm w-100 btn-block" onclick="@SearchEmployee">
          Search employee
        </button>
      </div>
    </form>
  </div>
</div>

<!-- Display results -->
<div class="row my-y">
<form class="d-flex flex-column my-1">
<div>
  <div class="row my-2">
    <h2 class="text-center">Employees</h2>
  </div>
  <div class="col">
    <select class="form-select form-select-sm" @bind="matchingEmployeeId">
      <option readonly="default">Employees</option>
      @foreach (var e in matchingEmployees)
      {
        <option value="@e.Id">@e.FirstName @e.LastName</option>
      }
    </select>
  </div>
</div>

<!-- Display employee information -->

<div class="row m-1">
  <label for="firstname" class="input-group-text input-group-sm form-label">First Name:</label>
  <input type="text" value="@selectedEmployee?.FirstName" placeholder="First Name" class="form-control" id="firstname" readonly>
</div>
<div class="row m-1">
  <label for="lastname" class="input-group-text input-group-sm form-label">Last Name:</label>
  <input type="text" value="@selectedEmployee?.LastName.ToUpper()" placeholder="Last name" class="form-control" id="lastname" readonly>
</div>
<div class="row m-1">
      <label for="datehired" class="input-group-text input-group-sm form-label">Date Hired:</label>
      <input type="date" bind="@selectedEmployee?.DateHired.ToString("yyyy-MM-dd")" class="form-control" id="datehired" readonly>
    </div>
<div class="row m-1">
  <label for="hourly_rate" class="input-group-text input-group-sm form-label">Hourly Rate:</label>
  @if (selectedEmployee != null)
  {
    <input type="number" id="hourly_rate_selected" name="hourly_rate" min="0.01" step="0.01" class="form-control" required @bind="@selectedEmployee.HourlyRate">
  }
  else
  {
    <input type="number" id="hourly_rate_placeholder" name="hourly_rate" min="0.01" step="0.01" class="form-control" placeholder="Hourly Rate">
  }
      
</div>
<div class="row m-1">
  <label for="position" class="input-group-text input-group-sm form-label">Position:</label>
  @if (selectedEmployee != null)
    {
      <input type="text" id="position" name="position" class="form-control" required @bind="@selectedEmployee.Position">
    }
    else
    {
      <input type="text" id="position_placeholder" class="form-control" name="position" placeholder="Position">
    }
     
</div>
<div class="row m-1">
  <button class="btn btn-primary btn-sm w-100 btn-block" type="button" onclick="@UpdateEmployee">Update employee</button>
</div>
<div class="row m-1">
  <button class="btn btn-warning btn-sm w-100 btn-block" type="submit" onclick="@FireEmployee">Fire employee</button>
</div>
<div class="row m-1">
  <button class="btn btn-danger btn-sm w-100 btn-block" type="submit" onclick="@DeleteEmployee">Delete employee</button>
</div>

  </form>
</div>

@if (selectedEmployee != null)
{
  <p>@selectedEmployee.IsActive</p>
  <p>@selectedEmployee.DateFired</p>

}

@code {
  string firstName;
  string lastName;
  List<HourlyEmployee> listOfEmployees;
  List<HourlyEmployee> matchingEmployees = new();
  int matchingEmployeeId;
  HourlyEmployee selectedEmployee => SelectedEmployee();

  protected override void OnInitialized()
  {
    GetAllEmployees();
  }

  private async void GetAllEmployees()
  {
    listOfEmployees = await App.Repo.GetEmployees();
  }

  private void SearchEmployee()
  {
    matchingEmployees.Clear();

    if (string.IsNullOrEmpty(firstName) && string.IsNullOrEmpty(lastName))
    {
      matchingEmployees.AddRange(listOfEmployees);
    }
    else
    {
      matchingEmployees.AddRange(listOfEmployees.Where
        (employee => (string.IsNullOrEmpty(firstName) || employee.FirstName == firstName.ToLower().Trim()) &&
                     (string.IsNullOrEmpty(lastName) || employee.LastName == lastName.ToLower().Trim())));
    }

    if (matchingEmployees.Count == 0) App.Current.MainPage.DisplayAlert("No results found", "No matching results", "Close");

    firstName = null;
    lastName = null;

  }

  private HourlyEmployee SelectedEmployee()
  {
    if (listOfEmployees == null)
    {
  // Handle the case where the list is null
      return null;
    }

    return listOfEmployees.FirstOrDefault(employee => employee.Id == matchingEmployeeId);
  }

  private async void DeleteEmployee()
  {
    if (selectedEmployee == null)
    {
      App.Current.MainPage.DisplayAlert("No employee selected", "Please select a employee first.", "Close");
      return;
    }
    await App.Repo.DeleteEmployee(selectedEmployee);
    App.Current.MainPage.DisplayAlert("Sucess", App.Repo.StatusMessage, "Close");
    JSRuntime.InvokeVoidAsync("location.reload");
    
  }

  private void FireEmployee()
  {
    if (selectedEmployee == null)
    {
      App.Current.MainPage.DisplayAlert("No employee selected", "Please select a employee first.", "Close");
      return;
    }
    selectedEmployee.DateFired = DateTime.Today;
    selectedEmployee.IsActive = false;
    UpdateEmployee();
  }
  
  private async void UpdateEmployee()
  {
    if (selectedEmployee == null)
    {
      App.Current.MainPage.DisplayAlert("No employee selected", "Please select a employee first.", "Close");
      return;
    }

    await App.Repo.UpdateEmployee(selectedEmployee);
    App.Current.MainPage.DisplayAlert("Sucess", App.Repo.StatusMessage, "Close");
    JSRuntime.InvokeVoidAsync("location.reload");
  }
}